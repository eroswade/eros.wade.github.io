<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HDEVELOP函数算法解析]]></title>
      <url>http://eroswade.github.io/2017/04/17/HDEVELOP/</url>
      <content type="html"><![CDATA[<h4 id="threshold-Image-Region-MinGray-MaxGray"><a href="#threshold-Image-Region-MinGray-MaxGray" class="headerlink" title="threshold(Image : Region : MinGray, MaxGray : )"></a>threshold(Image : Region : MinGray, MaxGray : )</h4><p>图像的GRAY THRESHOLD. 从MIN 到MAX的像素点留下来 O(A)</p>
<pre><code>* image 输入图像
* region 输出图像
* mingray GRAY 最小值
* maxgray GRAY 最大值
</code></pre><h4 id="difference-Region-Sub-RegionDifference"><a href="#difference-Region-Sub-RegionDifference" class="headerlink" title="difference(Region, Sub : RegionDifference : : )"></a>difference(Region, Sub : RegionDifference : : )</h4><p>减法运算</p>
<pre><code>* REGION 原图
* sub SUB图
* RegionDifference 输出图
</code></pre><h4 id="connection-Region-ConnectedRegions"><a href="#connection-Region-ConnectedRegions" class="headerlink" title="connection(Region : ConnectedRegions : : )"></a>connection(Region : ConnectedRegions : : )</h4><p>联通区域. 8点联通. neighborhood 算法.  F be the area of the input region and N be the number of generated connected components O(sqrt(F) * sqrt(N))</p>
<pre><code>* Region 原图
* ConnectedRegions 区域.
</code></pre><h4 id="select-shape-Regions-SelectedRegions-Features-Operation-Min-Max"><a href="#select-shape-Regions-SelectedRegions-Features-Operation-Min-Max" class="headerlink" title="select_shape(Regions : SelectedRegions : Features, Operation, Min, Max : )"></a>select_shape(Regions : SelectedRegions : Features, Operation, Min, Max : )</h4><p>选择区域算法</p>
<pre><code>* Regions 原图
* SelectedRegions 输出
* Features 什么类型的选择方式.
    * area 面积
    * row 所在行
    * column 所在列
    * width 长
    * height 高
    * convexity 凸性 参数为百分比
* Operation &apos;and&apos; &apos;or&apos;
* min 最小值
* max 最大值
</code></pre><h4 id="shape-trans-Region-RegionTrans-Type"><a href="#shape-trans-Region-RegionTrans-Type" class="headerlink" title="shape_trans(Region : RegionTrans : Type : )"></a>shape_trans(Region : RegionTrans : Type : )</h4><p>转换图形为规则图形</p>
<pre><code>* Region 输入
* RegionTrans 输出
* Type 转换类型
    * convex 凸边形
    * ellipse 椭圆
    * outer_circle 外圆
    * inner_circle 内圆
    * rectangle 方形
</code></pre><h4 id="smooth-image-Image-ImageSmooth-Filter-Alpha"><a href="#smooth-image-Image-ImageSmooth-Filter-Alpha" class="headerlink" title="smooth_image(Image : ImageSmooth : Filter, Alpha : )"></a>smooth_image(Image : ImageSmooth : Filter, Alpha : )</h4><p>模糊处理</p>
<pre><code>* 原图
* 输出
* 滤波方式
    * gauss
    * shen
    * deriche
* 参数
</code></pre><h4 id="invert-image-Image-ImageInvert"><a href="#invert-image-Image-ImageInvert" class="headerlink" title="invert_image(Image : ImageInvert : : )"></a>invert_image(Image : ImageInvert : : )</h4><p>正负全值反转.</p>
<h4 id="watersheds-Image-Basins-Watersheds"><a href="#watersheds-Image-Basins-Watersheds" class="headerlink" title="watersheds(Image : Basins, Watersheds : : )"></a>watersheds(Image : Basins, Watersheds : : )</h4><p>单图处理出峰和谷</p>
<h4 id="decompose3"><a href="#decompose3" class="headerlink" title="decompose3"></a>decompose3</h4><p>取出RGB 3色</p>
<h4 id="sobel-amp-Image-EdgeAmplitude-FilterType-Size"><a href="#sobel-amp-Image-EdgeAmplitude-FilterType-Size" class="headerlink" title="sobel_amp(Image : EdgeAmplitude : FilterType, Size : )"></a>sobel_amp(Image : EdgeAmplitude : FilterType, Size : )</h4><p>SOBEL算子边缘检测</p>
<pre><code>* FilterType 算子
* size 算子大小
</code></pre><h4 id="dilation-rectangle1-Region-RegionDilation-Width-Height"><a href="#dilation-rectangle1-Region-RegionDilation-Width-Height" class="headerlink" title="dilation_rectangle1(Region : RegionDilation : Width, Height : )"></a>dilation_rectangle1(Region : RegionDilation : Width, Height : )</h4><p>使用一个矩形的结构元素来膨胀图像</p>
<pre><code>* Region IN 带一定的标志,表示这个区域要扩展
* RegionDilation OUT
</code></pre><h4 id="reduce-domain-Image-Region-ImageReduced"><a href="#reduce-domain-Image-Region-ImageReduced" class="headerlink" title="reduce_domain(Image, Region : ImageReduced : : )"></a>reduce_domain(Image, Region : ImageReduced : : )</h4><p>根据REGION 删除不在REGION的点</p>
<pre><code>* Image 原图
* Region MASK 
* ImageReduced 取Region之后的图
</code></pre><h4 id="fill-up-Region-RegionFillUp"><a href="#fill-up-Region-RegionFillUp" class="headerlink" title="fill_up(Region : RegionFillUp : : )"></a>fill_up(Region : RegionFillUp : : )</h4><p>填充点孔心 算法依然是neighborhood 8点</p>
<h2 id="几个读过的例子"><a href="#几个读过的例子" class="headerlink" title="几个读过的例子"></a>几个读过的例子</h2><ul>
<li>autobahn 检测道路线</li>
<li>board_components 立体视觉检测(带立体标定)</li>
<li></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式LINUX_RPI3]]></title>
      <url>http://eroswade.github.io/2017/04/13/%E5%B5%8C%E5%85%A5%E5%BC%8FLINUX-RPI3/</url>
      <content type="html"><![CDATA[<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>用默认配置编译.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/raspberrypi/linux</div><div class="line"></div><div class="line">KERNEL=kernel</div><div class="line"></div><div class="line">make ARCH=arm CROSS_COMPILE=../tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- bcm2709_defconfig</div><div class="line"></div><div class="line">make ARCH=arm CROSS_COMPILE=../tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- -j4 zImage modules dtbs </div><div class="line"></div><div class="line">sudo make ARCH=arm CROSS_COMPILE=../tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- INSTALL_MOD_PATH=mnt/ext4 modules_install</div><div class="line"></div><div class="line">sudo cp arch/arm/boot/zImage mnt/fat32/<span class="variable">$KERNEL</span>.img</div><div class="line">sudo cp arch/arm/boot/dts/*.dtb mnt/fat32/</div><div class="line">sudo cp arch/arm/boot/dts/overlays/*.dtb* mnt/fat32/overlays/</div><div class="line">sudo cp arch/arm/boot/dts/overlays/README mnt/fat32/overlays/</div></pre></td></tr></table></figure></p>
<p>可以把交叉编译工具路径设置到PATH(每次使用都要设置):</p>
<blockquote>
<p>$export PATH=$PATH:/xxxxx/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin</p>
</blockquote>
<p>为了方便. 可以设置环境变量/etc/environment里设置PATH<br>PATH=”/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/sbin:/xxxxx/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin”</p>
<ul>
<li>如果需要配置编译选项,最好安装ncurses. 图形化配置的时候需要它.”make menuconfig”</li>
<li>如果要编译自己的交叉编译工具. 参考<a href="http://kegel.com/crosstool/" target="_blank" rel="external">crosstool</a></li>
</ul>
<h2 id="编译解析"><a href="#编译解析" class="headerlink" title="编译解析"></a>编译解析</h2><ul>
<li>顶层MAKEFILE 是所有MAKEFILE文件的核心. 从总体上控制内核编译.</li>
<li>.config 配置文件, 由第一次执行bcm2709_defconfig 生成. 所有的MAKEFILE都是根据.config来决定使用哪些文件 包含类似CONFIG_PLAT_SUNXI 这种参数</li>
<li>arch/arm/Makefile 对应体系(arm/i386)的Makefile.用来决定哪些体系结构相关的文件参与内核的生成. </li>
<li>scripts/Makefile Makefile共用的通用规则,脚本等.</li>
<li>kbuild Makefiles 各级子目录下的Makefile 它们相对简单, 被上一层Makefile调用来编译当前目录下的文件 .</li>
</ul>
<p>/arch/arm/Kconfig 定义了自编译内核配置文件 Kconfig会被MAKEFILE调用生成内核.<br>CONFIG_PLAT<em>SUNXI<br>在调用的时候会省略CONFIG</em> . 变成PLAT_SUNXI<br>config PLAT_SUNXI</p>
<h2 id="内核启动过程"><a href="#内核启动过程" class="headerlink" title="内核启动过程"></a>内核启动过程</h2><ul>
<li>bootloader </li>
<li>head.o 从bootloader接过控制权</li>
</ul>
<h2 id="编译内容"><a href="#编译内容" class="headerlink" title="编译内容"></a>编译内容</h2><ul>
<li>init  main mounts init_task</li>
<li>arch/arm/vfp</li>
<li>arch/arm/vdso</li>
<li>arch/arm/kernel</li>
<li>arch/arm/mm</li>
<li>arch/arm/common</li>
<li>arch/arm/probes</li>
<li>arch/arm/net</li>
<li>arch/arm/crypto</li>
<li>arch/arm/firmware</li>
<li>arch/arm/mach-bcm</li>
<li>kernel</li>
<li>kernel/bpf</li>
<li>kernel/debug</li>
<li>kernel/events</li>
<li>kernel/irq</li>
<li>kernel/locking</li>
<li>kernel/power</li>
<li>kernel/printk</li>
<li>kernel/rcu</li>
<li>kernel/sched</li>
<li>kernel/time</li>
<li>kernel/trace</li>
<li>mm</li>
<li>fs</li>
<li>fs/9p</li>
<li>fs/autofs4</li>
<li>fs/btrfs</li>
<li>fs/cachefiles</li>
<li>fs/cifs</li>
<li>fs/configfs</li>
<li>fs/debugfs</li>
<li>fs/devpts</li>
<li>fs/dlm</li>
<li>fs/ecryptfs</li>
<li>fs/exportfs</li>
<li>fs/ext4</li>
<li>fs/f2fs</li>
<li>fs/fat</li>
<li>fs/fuse</li>
<li>fs/gfs2</li>
<li>….</li>
<li>ipc</li>
<li>security/keys</li>
<li>crypto</li>
<li>block</li>
<li>drivers/base</li>
<li>drivers/block</li>
<li>drivers/bluetooth</li>
<li>drivers/char</li>
<li>drivers/cdrom</li>
<li>drivers/bus</li>
<li>drivers/clk  clocksource  connector  cpufreq  dma extcon firemware gpio gpu hid i2c iio input irqchip leds md mailbox media net </li>
<li>sound</li>
<li>net ipv4 ipv6 netfilter wireless …</li>
<li>arch/arm/lib</li>
<li>lib</li>
<li>arch/arm/boot</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RPI3 </tag>
            
            <tag> LINUX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux内核文件编译分析]]></title>
      <url>http://eroswade.github.io/2017/04/11/linux%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="MAKEFILE"><a href="#MAKEFILE" class="headerlink" title="MAKEFILE"></a>MAKEFILE</h2><p>内核配置完成后，在顶层目录中执行“#make uImage”便开始编译内核。但是，uImage却不是在顶层Makefile中定义，而是在arch/$(ARCH)/Makefile中定义。</p>
<p>顶层Makefile Line 452:<br>include $(srctree)/arch/$(SRCARCH)/Makefile<br>其中srctree为源码绝对路径，</p>
<p>即该变量等于架构名称，我们以arm为例进行说明。 </p>
<p>arch/arm/Makefile Line 230:<br>zImage Image xipImage bootpImage uImage: vmlinux<br>可见uImage依赖于vmlinux，要先生成vmlinux，然后执行下边这条指令完成编译。<br>arch/arm/Makefile Line 231:<br>$(Q)$(MAKE) $(build)=$(boot) MACHINE=$(MACHINE) $(boot)/$@</p>
<p>Q的定义：选择静态编译与否（是否打印编译信息）<br>MAKE: 系统环境变量，值为make<br>build:　值为“-f scripts/Makefile.build obj=”实际上就是调用子Makefile–scripts/Makefile.build，然后传递参数目标文件夹。<br>Kbuild.include被顶层Makefile所包含</p>
<h2 id="源代码定位"><a href="#源代码定位" class="headerlink" title="源代码定位"></a>源代码定位</h2><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>/arch/arm/Kconfig 定义了自编译内核配置文件<br>/arch/arm/configs 和上面的一起.定义不同的CHIP的配置(其实就是定义上面哪些配置要打开. 所以重点还是在Kconfig)</p>
<p>在Kconfig的1080行开始,定义了 source “arch/arm/mach-at91/Kconfig” 也就是不同的芯片会调用各自目录下的Kconfig</p>
<h4 id="通过配置找代码"><a href="#通过配置找代码" class="headerlink" title="通过配置找代码"></a>通过配置找代码</h4><p>在MAKEFILE里找到对应配置的代码<br>plat-$(CONFIG_PLAT_SUNXI)    := sunxi<br>对应的就是plat-sunxi<br>有的时候对应的源代码很难找. 只能用GREP来了.<br>比如CONFIG_CSI_OV7670 ,处理它的MAKEFILE在 drivers\media\video\sun4icsi\device\MAKEFILE</p>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FREEBSD内核文件编译分析]]></title>
      <url>http://eroswade.github.io/2017/04/11/FREEBSD%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>本文不是叫大家怎么做FreeBSD内核，做内核太简单了，不管是Linux和Unix。<br>在网上找了好久，一点可用的文章都没有找到，FreeBSD的官网的文章也没有给出说法，只能自己在/usr/src和/usr/src/sys和/usr/src/sys/conf下面疯狂的grep，找文件，找引用，才有了自己的一些理解。<br>先说说Linux的内核文件的编译关联吧，Linux的每个文件的编译和是 kconfig配置关联在一起的，kconfig在经过make menuconfig之后，得到一个.config文件，然后每个文件夹下面的Makefile，会check这个全局的.config文件，来决定哪些 文件该编译，哪些不用编译。多说无益，参考代码即可。<br>FreeBSD的做法有些不一样了，Linux把哪些文件要编译分散到了每个文件夹，然后check Makefile。FreeBSD是做两个总的文件，决定哪些文件该编译哪些不该，这两个文件分别是这个路径下：<br>ztz0223@BTazuo:/usr/src/sys/conf % pwd<br>/usr/src/sys/conf<br>的两个文件：files，files.i386<br><a id="more"></a><br>files是与架构无关的，也就是不管代码在什么平台上面编译，i386或者power pc上面都靠这个文件控制编译。对应的files.i386，就是特定平台的编译控制。<br>我们来看一下，这两个文件里面是什么吧，首先是files：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">2082 dev/xe/if_xe.c          optional xe</div><div class="line">2083 dev/xe/if_xe_pccard.c       optional xe pccard</div><div class="line">2084 dev/xl/if_xl.c          optional xl pci</div><div class="line">2085 dev/xl/xlphy.c          optional xl pci</div><div class="line">2086 fs/coda/coda_fbsd.c     optional vcoda</div><div class="line">2087 fs/coda/coda_psdev.c        optional vcoda</div><div class="line">2088 fs/coda/coda_subr.c     optional vcoda</div><div class="line">2089 fs/coda/coda_venus.c        optional vcoda</div><div class="line">2090 fs/coda/coda_vfsops.c       optional vcoda</div><div class="line">2091 fs/coda/coda_vnops.c        optional vcoda</div><div class="line">2092 fs/deadfs/dead_vnops.c      standard</div><div class="line">2093 fs/devfs/devfs_devs.c       standard</div><div class="line">2094 fs/devfs/devfs_dir.c        standard</div><div class="line">2095 fs/devfs/devfs_rule.c       standard</div><div class="line">2096 fs/devfs/devfs_vfsops.c     standard</div><div class="line">2097 fs/devfs/devfs_vnops.c      standard</div><div class="line">2098 fs/fdescfs/fdesc_vfsops.c   optional fdescfs</div><div class="line">2099 fs/fdescfs/fdesc_vnops.c    optional fdescfs</div><div class="line">2100 fs/fifofs/fifo_vnops.c      standard</div><div class="line">2101 fs/hpfs/hpfs_alsubr.c       optional hpfs</div><div class="line">2102 fs/hpfs/hpfs_lookup.c       optional hpfs</div><div class="line">&quot;files&quot; [readonly] 3544 lines --57%--</div></pre></td></tr></table></figure></p>
<p>再看files.i386：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">417 i386/i386/minidump_machdep.c    standard</div><div class="line">418 i386/i386/mp_clock.c        optional smp</div><div class="line">419 i386/i386/mp_machdep.c      optional native smp</div><div class="line">420 i386/xen/mp_machdep.c       optional xen smp</div><div class="line">421 i386/i386/mp_watchdog.c     optional mp_watchdog smp</div><div class="line">422 i386/i386/mpboot.s      optional smp native</div><div class="line">423 i386/xen/mptable.c      optional apic xen</div><div class="line">424 i386/i386/perfmon.c     optional perfmon</div><div class="line">425 i386/i386/pmap.c        optional native</div><div class="line">426 i386/xen/pmap.c         optional xen</div><div class="line">427 i386/i386/ptrace_machdep.c  standard</div><div class="line">428 i386/i386/stack_machdep.c   optional ddb | stack</div><div class="line">429 i386/i386/support.s     standard</div><div class="line">430 i386/i386/swtch.s       standard</div><div class="line">431 i386/i386/sys_machdep.c     standard</div><div class="line">432 i386/i386/trap.c        standard</div><div class="line">433 i386/i386/uio_machdep.c     standard</div><div class="line">434 i386/i386/vm86.c        standard</div><div class="line">435 i386/i386/vm_machdep.c      standard</div><div class="line">436 i386/ibcs2/ibcs2_errno.c    optional ibcs2</div><div class="line">437 i386/ibcs2/ibcs2_fcntl.c    optional ibcs2</div><div class="line">438 i386/ibcs2/ibcs2_ioctl.c    optional ibcs2</div><div class="line">439 i386/ibcs2/ibcs2_ipc.c      optional ibcs2</div><div class="line">440 i386/ibcs2/ibcs2_isc.c      optional ibcs2</div><div class="line">&quot;files.i386&quot; [readonly] 537 lines --71%--</div></pre></td></tr></table></figure></p>
<p>对于上面的files，我要说的就是，后面带有standard的表明该文件 一定会编译，不管是快速编译指定模块，还是全部完全编译。 二 optional xxx标识当xxx选项开启的时候，才会编译对应的文件。如果内核里指定了options，就会编译到内核文件里，而不是以模块方式可以动态加载的了，一 般都会建议采用模块方式。<br>上面files.i386可以看出：<br>436 i386/ibcs2/ibcs2_errno.c    optional ibcs2  只有在ibcs2选项开启的时候才会编译<br>而：<br>432 i386/i386/trap.c        standard                 在i386架构平台下编译的话，一定要编译的。<br>OK，说到这里，已经知道文件如何编译的了，那么在指定快速编译的时候，就是在make.conf里面指定编译的模块，就如官网文档所示：</p>
<h2 id="联编内核"><a href="#联编内核" class="headerlink" title="联编内核"></a>联编内核</h2><ol>
<li><p>进入 /usr/src 目录</p>
<blockquote>
<p>cd /usr/src</p>
</blockquote>
</li>
<li><p>编译内核:</p>
</li>
</ol>
<blockquote>
<p>make buildkernel KERNCONF=MYKERNEL</p>
</blockquote>
<ol>
<li>安装新内核：</li>
</ol>
<blockquote>
<p>make installkernel KERNCONF=MYKERNEL</p>
</blockquote>
<p>注意: 使用这种方法联编内核时， 需要安装完整的 FreeBSD 源代码。<br>提示: 默认情况下， 在联编您所定制的内核时， 全部 内核模块也会同时参与构建。 如果您希望更快地升级内核， 或者只希望联编您所需要的模块， 则应在联编之前编辑 /etc/make.conf：<br>MODULES_OVERRIDE = linux acpi sound/sound sound/driver/ds1 ntfs<br>这个变量的内容是所希望构建的模块列表。<br>WITHOUT_MODULES = linux acpi sound ntfs<br>这个变量的内容是将不在联编过程中编译的顶级模块列表。 如果希望了解更多与构建内核有关的变量， 请参见 make.conf(5) 联机手册。</p>
<p>比如，我在/etc/make.conf里面指定：<br>MODULES_OVERRIDE = xfs<br>那么是不是仅仅编译xfs的文件吗？<br>当然不是，当我们执行</p>
<blockquote>
<p>make buildkernel KERNCONF=MYKERNEL</p>
</blockquote>
<p>开始编译的时候，会发现打印里面有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cc -c -O -pipe  -std=c99 -g -Wall -Wredundant-decls -Wnested-externs -Wstrict-prototypes  -Wmissing-prototypes -Wpointer-arith -Winline -Wcast-qual  -Wundef -Wno-pointer-sign -fformat-extensions  -Wmissing-include-dirs -fdiagnostics-show-option   -nostdinc  -I. -I/usr/src/sys -I/usr/src/sys/contrib/altq -D_KERNEL -DHAVE_KERNEL_OPTION_HEADERS -include opt_global.h -fno-common -finline-limit=8000 --param inline-unit-growth=100 --param large-function-growth=1000  -mno-align-long-strings -mpreferred-stack-boundary=2 -mno-mmx -mno-sse -msoft-float -ffreestanding -fstack-protector -Werror  /usr/src/sys/cam/ata/ata_all.c</div></pre></td></tr></table></figure>
<p>但是我们可以从files里面看出来：</p>
<blockquote>
<p>110 cam/ata/ata_all.c       optional scbus</p>
</blockquote>
<p>scbus开启才会编译这个文件。<br>为什么他会编译？<br>很简单，我们看</p>
<blockquote>
<p>make buildkernel KERNCONF=MYKERNEL</p>
</blockquote>
<p>的最开始有一些打印，是删除中间文件的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--------------------------------------------------------------</div><div class="line">&gt;&gt;&gt; stage 2.1: cleaning up the object tree</div><div class="line">--------------------------------------------------------------</div><div class="line">cd /usr/obj/usr/src/sys/GENERIC_20130217; MAKEOBJDIRPREFIX=/usr/obj  MACHINE_ARCH=i386  MACHINE=i386  CPUTYPE= GROFF_BIN_PATH=/usr/obj/usr/src/tmp/legacy/usr/bin  GROFF_FONT_PATH=/usr/obj/usr/src/tmp/legacy/usr/share/groff_font  GROFF_TMAC_PATH=/usr/obj/usr/src/tmp/legacy/usr/share/tmac  _SHLIBDIRPREFIX=/usr/obj/usr/src/tmp  _LDSCRIPTROOT=  VERSION=&quot;FreeBSD 9.1-RELEASE i386 901000&quot;  INSTALL=&quot;sh /usr/src/tools/install.sh&quot;  PATH=/usr/obj/usr/src/tmp/legacy/usr/sbin:/usr/obj/usr/src/tmp/legacy/usr/bin:/usr/obj/usr/src/tmp/legacy/usr/games:/usr/obj/usr/src/tmp/usr/sbin:/usr/obj/usr/src/tmp/usr/bin:/usr/obj/usr/src/tmp/usr/games:/sbin:/bin:/usr/sbin:/usr/bin make KERNEL=kernel cleandir</div><div class="line">rm -f *.o *.so *.So *.ko *.s eddep errs  kernel.debug kernel kernel.symbols  linterrs makelinks tags vers.c  vnode_if.c vnode_if.h vnode_if_newproto.h vnode_if_typedef.h  agp_if.c ata_if.c eisa_if.c miibus_if.c mmcbr_if.c mmcbus_if.c mvs_if.c card_if.c power_if.c pci_if.c pcib_if.c ppbus_if.c hdac_if.c ac97_if.c channel_if.c feeder_if.c mixer_if.c mpu_if.c mpufoi_if.c synth_if.c uart_if.c usb_if.c g_part_if.c g_raid_md_if.c g_raid_tr_if.c isa_if.c bus_if.c clock_if.c cpufreq_if.c device_if.c linker_if.c serdev_if.c acpi_if.c acpi_wmi_if.c agp_if.h ata_if.h eisa_if.h miibus_if.h mmcbr_if.h mmcbus_if.h mvs_if.h card_if.h power_if.h pci_if.h pcib_if.h ppbus_if.h hdac_if.h ac97_if.h channel_if.h feeder_if.h mixer_if.h mpu_if.h mpufoi_if.h synth_if.h uart_if.h usb_if.h g_part_if.h g_raid_md_if.h g_raid_tr_if.h isa_if.h bus_if.h clock_if.h cpufreq_if.h device_if.h linker_if.h serdev_if.h acpi_if.h acpi_wmi_if.h  acpi_quirks.h aicasm* y.tab.h aic7xxx_seq.h aic7xxx_reg.h  aic7xxx_reg_print.c aic79xx_seq.h aic79xx_reg.h  aic79xx_reg_print.c feeder_eq_gen.h feeder_rate_gen.h  snd_fxdiv_gen.h miidevs.h pccarddevs.h teken_state.h usbdevs.h  usbdevs_data.h acpi_wakecode.o acpi_wakecode.bin acpi_wakecode.h  acpi_wakedata.h</div></pre></td></tr></table></figure></p>
<blockquote>
<p>rm -f .depend machine x86</p>
</blockquote>
<p>会删除一些生成的临时文件，和一些头文件，再生成这些头文件，FreeBSD的内核编译的时候，头文件变了，相关的c文件都是要重新编译过的。这就解释上面的增量编译xfs的时候，会要编译一些不相关的文件。<br>再回到上面的：</p>
<blockquote>
<p>110 cam/ata/ata_all.c       optional scbus</p>
</blockquote>
<p>这个scbus option是在哪里开的？<br>很简单了，就是在文件夹/usr/src/sys/i386/conf/下面<br>ztz0223@BTazuo:/usr/src/sys/i386/conf %<br>打开GENERIC文件看就知道了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">19 # $FreeBSD: release/9.1.0/sys/i386/conf/GENERIC 235877 2012-05-24 03:45:13Z mav $</div><div class="line">20</div><div class="line">21 cpu     I486_CPU</div><div class="line">22 cpu     I586_CPU</div><div class="line">23 cpu     I686_CPU</div><div class="line">24 ident       GENERIC</div><div class="line">25</div><div class="line">26 makeoptions DEBUG=-g        # Build kernel with gdb(1) debug symbols</div><div class="line">27</div><div class="line">28 options     SCHED_ULE       # ULE scheduler</div><div class="line">29 options     PREEMPTION      # Enable kernel thread preemption</div><div class="line">30 options     INET            # InterNETworking</div><div class="line">31 options     INET6           # IPv6 communications protocols</div><div class="line">32 options     SCTP            # Stream Control Transmission Protocol</div><div class="line">33 options     FFS         # Berkeley Fast Filesystem</div><div class="line">34 options     SOFTUPDATES     # Enable FFS soft updates support</div><div class="line">35 options     UFS_ACL         # Support for access control lists</div><div class="line">36 options     UFS_DIRHASH     # Improve performance on big directories</div><div class="line">37 options     UFS_GJOURNAL        # Enable gjournal-based UFS journaling</div><div class="line">38 options     MD_ROOT         # MD is a potential root device</div><div class="line">39 options     NFSCL           # New Network Filesystem Client</div><div class="line">40 options     NFSD            # New Network Filesystem Server</div><div class="line">41 options     NFSLOCKD        # Network Lock Manager</div><div class="line">42 options     NFS_ROOT        # NFS usable as /, requires NFSCL</div><div class="line">43 options     MSDOSFS         # MSDOS Filesystem</div><div class="line">44 options     CD9660          # ISO 9660 Filesystem</div><div class="line">45 options     PROCFS          # Process filesystem (requires PSEUDOFS)</div><div class="line">46 options     PSEUDOFS        # Pseudo-filesystem framework</div><div class="line">47 options     GEOM_PART_GPT       # GUID Partition Tables.</div><div class="line">48 options     GEOM_RAID       # Soft RAID functionality.</div><div class="line">49 options     GEOM_LABEL      # Provides labelization</div><div class="line">50 options     COMPAT_FREEBSD4     # Compatible with FreeBSD4</div><div class="line">51 options     COMPAT_FREEBSD5     # Compatible with FreeBSD5</div><div class="line">52 options     COMPAT_FREEBSD6     # Compatible with FreeBSD6</div><div class="line">53 options     COMPAT_FREEBSD7     # Compatible with FreeBSD7</div><div class="line">54 options     SCSI_DELAY=5000     # Delay (in ms) before probing SCSI</div><div class="line">55 options     KTRACE          # ktrace(1) support</div><div class="line">56 options     STACK           # stack(9) support</div><div class="line">&quot;GENERIC&quot; [readonly] 361L, 14505C</div></pre></td></tr></table></figure></p>
<p>这里有options，标识对应的选项开启了。<br>还有一个问题，就是代码里面有一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">137 #ifdef INET</div><div class="line">138 int (*carp_iamatch_p)(struct ifnet *, struct in_ifaddr *, struct in_addr *,</div><div class="line">139     u_int8_t **);</div><div class="line">140 #endif</div><div class="line">141 #ifdef INET6</div><div class="line">142 struct ifaddr *(*carp_iamatch6_p)(struct ifnet *ifp, struct in6_addr *taddr6);</div><div class="line">143 caddr_t (*carp_macmatch6_p)(struct ifnet *ifp, struct mbuf *m,</div><div class="line">144     const struct in6_addr *taddr);</div><div class="line">145 #endif</div><div class="line">146</div><div class="line">147 struct mbuf *(*tbr_dequeue_ptr)(struct ifaltq *, int) = NULL;</div><div class="line">148</div><div class="line">&quot;net/if.c&quot; [readonly] 3419 lines --2%--</div></pre></td></tr></table></figure></p>
<p>这个INET在哪里定义的呢？<br>回到路径::/usr/src/sys/conf ,查看两个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--  1 root  wheel   23377 Dec  4 06:11 options</div><div class="line">-rw-r--r--  1 root  wheel    1563 Dec  4 06:11 options.i386</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ztz0223@BTazuo:/usr/src/sys/conf % less options</div><div class="line">388 DEVICE_POLLING</div><div class="line">389 DEV_ENC         opt_enc.h</div><div class="line">390 DEV_PF          opt_pf.h</div><div class="line">391 DEV_PFLOG       opt_pf.h</div><div class="line">392 DEV_PFSYNC      opt_pf.h</div><div class="line">393 DEV_VLAN        opt_vlan.h</div><div class="line">394 DUMMYNET        opt_ipdn.h</div><div class="line">395 ETHER_8022      opt_ef.h</div><div class="line">396 ETHER_8023      opt_ef.h</div><div class="line">397 ETHER_II        opt_ef.h</div><div class="line">398 ETHER_SNAP      opt_ef.h</div><div class="line">399 INET            opt_inet.h</div><div class="line">400 INET6           opt_inet6.h</div></pre></td></tr></table></figure>
<p>则可以知道INET就定义在opt_inet.h中，而在编译过FreeBSD内核之后，在/usr/obj/usr/src/sys/GENERIC生成的临时文件路径下面，就有这个opt_inet.h文件了，查看一下：<br>ztz0223@BTazuo:/usr/obj/usr/src/sys/GENERIC_20130217 % vim opt_inet.h<br> 1 #define INET 1<br>同样options.i386里面也会指定一些平台代码需要的头文件和宏定义。<br>最后一个问题，就是在/etc/make.conf指定：<br>MODULES_OVERRIDE = xfs<br>标识增量编译xfs，那么xfs就是一个模块，该模块在哪里指定？在/usr/src/sys/modules下面，有很多文件夹：</p>
<blockquote>
<p>/usr/src/sys/modules % ls -la  | grep xfs</p>
</blockquote>
<p>drwxr-xr-x    2 root  wheel    512 Dec  4 05:09 xfs</p>
<p>这个下面的文件夹里面只有Makefile，没有其他的东西的，这些Makefile就是指定编译模块增量编译内核的时候，指定编译的Makefile了。<br>这里看一下xfs下面的Makefile内容了：</p>
<blockquote>
<p>/usr/src/sys/modules % cat xfs/Makefile</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"># $FreeBSD: release/9.1.0/sys/modules/xfs/Makefile 229734 2012-01-06 21:23:00Z dim $</div><div class="line">.PATH:  $&#123;.CURDIR&#125;/../../gnu/fs/xfs \</div><div class="line">        $&#123;.CURDIR&#125;/../../gnu/fs/xfs/FreeBSD \</div><div class="line">        $&#123;.CURDIR&#125;/../../gnu/fs/xfs/FreeBSD/support</div><div class="line">KMOD=    xfs</div><div class="line">WERROR=</div><div class="line">SRCS =  vnode_if.h \</div><div class="line">        xfs_alloc.c \</div><div class="line">        xfs_alloc_btree.c \</div><div class="line">        xfs_bit.c \</div><div class="line">        xfs_bmap.c \</div><div class="line">        xfs_bmap_btree.c \</div><div class="line">        xfs_btree.c \</div><div class="line">        xfs_buf_item.c \</div><div class="line">        xfs_da_btree.c \</div><div class="line">        xfs_dir.c \</div><div class="line">        xfs_dir2.c \</div><div class="line">        xfs_dir2_block.c \</div><div class="line">        xfs_dir2_data.c \</div><div class="line">        xfs_dir2_leaf.c \</div><div class="line">        xfs_dir2_node.c \</div><div class="line">        xfs_dir2_sf.c \</div><div class="line">        xfs_dir2_trace.c \</div><div class="line">        xfs_dir_leaf.c \</div><div class="line">        xfs_error.c \</div><div class="line">        xfs_extfree_item.c \</div><div class="line">        xfs_freebsd_iget.c \</div><div class="line">        xfs_fsops.c \</div><div class="line">        xfs_ialloc.c \</div><div class="line">        xfs_ialloc_btree.c \</div><div class="line">        xfs_inode.c \</div><div class="line">        xfs_inode_item.c \</div><div class="line">        xfs_iocore.c \</div><div class="line">        xfs_itable.c \</div><div class="line">        xfs_dfrag.c \</div><div class="line">        xfs_log.c \</div><div class="line">        xfs_log_recover.c \</div><div class="line">        xfs_mount.c \</div><div class="line">        xfs_rename.c \</div><div class="line">        xfs_trans.c \</div><div class="line">        xfs_trans_ail.c \</div><div class="line">        xfs_trans_buf.c \</div><div class="line">        xfs_trans_extfree.c \</div><div class="line">        xfs_trans_inode.c \</div><div class="line">        xfs_trans_item.c \</div><div class="line">        xfs_utils.c \</div><div class="line">        xfs_vfsops.c \</div><div class="line">        xfs_vnodeops.c \</div><div class="line">        xfs_rw.c \</div><div class="line">        xfs_iget.c \</div><div class="line">        xfs_attr_leaf.c \</div><div class="line">        xfs_attr.c \</div><div class="line">        xfs_dmops.c \</div><div class="line">        xfs_qmops.c \</div><div class="line">        xfs_mountops.c \</div><div class="line">        xfs_vnops.c \</div><div class="line">        xfs_frw.c \</div><div class="line">        xfs_iomap.c \</div><div class="line">        xfs_buf.c \</div><div class="line">        xfs_globals.c \</div><div class="line">        xfs_dmistubs.c \</div><div class="line">        xfs_behavior.c \</div><div class="line">        xfs_super.c \</div><div class="line">        xfs_stats.c \</div><div class="line">        xfs_sysctl.c \</div><div class="line">        xfs_vfs.c \</div><div class="line">        xfs_vnode.c \</div><div class="line">        xfs_fs_subr.c \</div><div class="line">        xfs_ioctl.c \</div><div class="line">        debug.c \</div><div class="line">        ktrace.c \</div><div class="line">        mrlock.c \</div><div class="line">        uuid.c \</div><div class="line">        kmem.c \</div><div class="line">        kdb.c</div><div class="line">SRCS+=  opt_ddb.h</div><div class="line">.include &lt;bsd.kmod.mk&gt;</div><div class="line">CFLAGS+= -I$&#123;.CURDIR&#125;/../../gnu/fs/xfs/FreeBSD \</div><div class="line">         -I$&#123;.CURDIR&#125;/../../gnu/fs/xfs/FreeBSD/support \</div><div class="line">         -I$&#123;.CURDIR&#125;/../../gnu/fs/xfs</div><div class="line">CWARNFLAGS.xfs_ioctl.c=         $&#123;NO_WSELF_ASSIGN&#125;</div><div class="line">CWARNFLAGS+=                    $&#123;CWARNFLAGS.$&#123;.IMPSRC:T&#125;&#125;</div></pre></td></tr></table></figure>
<p>ztz0223@BTazuo:/usr/src/sys/modules %<br>再看一下，增量编译的过程打印，这里只附上xfs链接的相关的部分：<br>ld  -d -warn-common -r -d -o xfs.kld xfs_alloc.o xfs_alloc_btree.o xfs_bit.o xfs_bmap.o xfs_bmap_btree.o xfs_btree.o xfs_buf_item.o xfs_da_btree.o xfs_dir.o xfs_dir2.o xfs_dir2_block.o xfs_dir2_data.o xfs_dir2_leaf.o xfs_dir2_node.o xfs_dir2_sf.o xfs_dir2_trace.o xfs_dir_leaf.o xfs_error.o xfs_extfree_item.o xfs_freebsd_iget.o xfs_fsops.o xfs_ialloc.o xfs_ialloc_btree.o xfs_inode.o xfs_inode_item.o xfs_iocore.o xfs_itable.o xfs_dfrag.o xfs_log.o xfs_log_recover.o xfs_mount.o xfs_rename.o xfs_trans.o xfs_trans_ail.o xfs_trans_buf.o xfs_trans_extfree.o xfs_trans_inode.o xfs_trans_item.o xfs_utils.o xfs_vfsops.o xfs_vnodeops.o xfs_rw.o xfs_iget.o xfs_attr_leaf.o xfs_attr.o xfs_dmops.o xfs_qmops.o xfs_mountops.o xfs_vnops.o xfs_frw.o xfs_iomap.o xfs_buf.o xfs_globals.o xfs_dmistubs.o xfs_behavior.o xfs_super.o xfs_stats.o xfs_sysctl.o xfs_vfs.o xfs_vnode.o xfs_fs_subr.o xfs_ioctl.o debug.o ktrace.o mrlock.o uuid.o kmem.o kdb.o<br>有这么多，我想足够理解了。</p>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> freebsd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[海龟法则]]></title>
      <url>http://eroswade.github.io/2017/04/09/%E6%B5%B7%E9%BE%9F%E6%B3%95%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="什么是TR-True-Range"><a href="#什么是TR-True-Range" class="headerlink" title="什么是TR(True Range)"></a>什么是TR(True Range)</h2><p>TR = max(H-L, H-PDC, PDC-L);<br>H high<br>L low<br>PDC last close. REF(c,1)</p>
<h2 id="ATR-average-True-Range"><a href="#ATR-average-True-Range" class="headerlink" title="ATR (average True Range)"></a>ATR (average True Range)</h2><p>ATR = ((T-1)*PDN +TR)/T<br>T=average days<br>PDN = last ATR ==&gt; REF(ATR,1)</p>
<h2 id="风险承受率"><a href="#风险承受率" class="headerlink" title="风险承受率"></a>风险承受率</h2><p>比如1% 设为R<br>总资金 100000 设为M<br>承受亏损量为: N=M*R </p>
<p>头寸为: M*R/ATRV 做为一个UNIT</p>
<p>ATRV为资金波动: 比如股市. 1手100股,假设股票价格为15. 一天的震浮为10% 也就是0.1, ATRV=0.1 <em> 100 </em> 15 = 150</p>
<p>头寸为: 100000*0.01/150 = 6.7手</p>
<p>如果亏损:<br>也就是6.7手 .总资金为 10050 元<br>回撤震动10%: 15<em>0.1 = 1.5元 /手<br>亏损量为: 1.5 </em> 6.7 * 100 = 1005元</p>
<p>如果盈利:<br>以0.5个UNIT增加</p>
<h2 id="进场"><a href="#进场" class="headerlink" title="进场"></a>进场</h2><p>10日线上穿20日线. 以1个UNIT进场. </p>
<h2 id="加仓"><a href="#加仓" class="headerlink" title="加仓"></a>加仓</h2><p>如果上涨了0.5ATR 增加1个UNIT 不建议加仓超过4次. 其实就是每盈利500, 增加 6.7手</p>
<h2 id="止损"><a href="#止损" class="headerlink" title="止损"></a>止损</h2><p>如果亏损超过2UNIT 止损. 止损随着加减仓, 动态修正的. 亏损2000 止损.</p>
<h2 id="止盈"><a href="#止盈" class="headerlink" title="止盈"></a>止盈</h2><p>10日下穿20日</p>
<h2 id="期货"><a href="#期货" class="headerlink" title="期货"></a>期货</h2><p>假设价格为3000 ATR为1500 也就是150个点. 这样的话. 一天浮动为0.5  ATRV = 0.5<em>3000 = 1500<br>资金6W 容忍亏损0.05 也就是3000<br>头寸为: 60000</em>0.05/1500 = 2手<br>加仓为: 每上涨75个点, 加一次. 2手.<br>如果全加完: 4*2 = 8手. 占资金为 24000以上.</p>
]]></content>
      
        <categories>
            
            <category> 金融 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 量化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu代码分析]]></title>
      <url>http://eroswade.github.io/2017/04/09/Ubuntu-CODE/</url>
      <content type="html"><![CDATA[<h2 id="代码位置"><a href="#代码位置" class="headerlink" title="代码位置"></a>代码位置</h2><p>执行 sudo apt-get install linux-source 才会获取到源代码. 否则只有HEADER文件.<br>执行完安装后. 代码依然会在/usr/src下 位置和BSD是一样的.</p>
<p>也可以从GITHUB下载. 比如要编译特定的系统的话.<br><a id="more"></a></p>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">init 内核初始化代码</div><div class="line">kernel 内核核心部分：进程、定时、程序执行、信号、模块。。。</div><div class="line">mm 内存处理</div><div class="line">arch 平台相关代码</div><div class="line">   i386 IBM的PC体系结构</div><div class="line">      kernel 内核核心部分</div><div class="line">      mm 内存管理</div><div class="line">      math-emu 浮点单元软件仿真</div><div class="line">      lib 硬件相关工具函数</div><div class="line">      boot 引导程序</div><div class="line">         compressed 压缩内核处理</div><div class="line">         tools 生成压缩内核映像的程序</div><div class="line">   alpha 康柏的Alpha体系结构</div><div class="line">   s390 IBM的System/390体系结构</div><div class="line">   sparc Sun的SPARC体系结构</div><div class="line">   sparc64 Sun的Ultra-SPARC体系结构</div><div class="line">   mips SGI的MIPS体系结构</div><div class="line">   ppc Motorola-IBM的基于PowerPC的体系结构</div><div class="line">   m68k Motorola的基于MC680x0的体系结构</div><div class="line">   arm 基于ARM处理器的体系结构</div><div class="line">fs 文件系统</div><div class="line">   proc /proc虚拟文件系统</div><div class="line">   devpts /dev/pts虚拟文件系统</div><div class="line">   ext2 Linux本地的Ext2文件系统</div><div class="line">   isofs ISO9660文件系统（CD-ROM）</div><div class="line">   nfs 网络文件系统（NFS）</div><div class="line">   nfsd 集成的网络文件系统服务器</div><div class="line">   fat 基于FAT的文件系统的通用代码</div><div class="line">   msdos 微软的MS-DOS文件系统</div><div class="line">   vfat 微软的Windows文件系统（VFAT）</div><div class="line">   nls 本地语言支持</div><div class="line">   ntfs 微软的Windows NT文件系统</div><div class="line">   smbfs 微软的Windows服务器消息块（SMB）文件系统</div><div class="line">   umsdos UMSDOS文件系统</div><div class="line">   minix MINIX文件系统</div><div class="line">   hpfs IBM的OS/2文件系统</div><div class="line">   sysv SystemV、SCO、Xenix、Coherent和Version7文件系统</div><div class="line">   ncpfs Novell的Netware核心协议（NCP0</div><div class="line">   ufs UnixBSD、SunOs、FreeBSD、NetBSD、OpenBSD和NeXTStep文件系统</div><div class="line">   affs Amiga的快速文件系统（FFS）</div><div class="line">   coda Coda网络文件系统</div><div class="line">   hfs 苹果的Macintosh文件系统</div><div class="line">   adfs Acorn磁盘填充文件系统</div><div class="line">   efs SGI IRIX的EFS文件系统</div><div class="line">   qnx4 QNX4 OS使用不的文件系统</div><div class="line">   romfs 只读小文件系统</div><div class="line">   autofs 目录自动装载程序的支持</div><div class="line">   lockd 远程文件锁定的支持</div><div class="line">Net 网络代码</div><div class="line">Ipc System V的进程间通信</div><div class="line">Drivers 设备驱动程序</div><div class="line">   block 块设备驱动程序</div><div class="line">      paride 从并口访问IDE设备的支持</div><div class="line">   scsi SCSI设备驱动程序</div><div class="line">   char 字符设备驱动程序</div><div class="line">      joystick 游戏杆</div><div class="line">      ftape 磁带流设备</div><div class="line">      hfmodem 无线电设备</div><div class="line">      ip2 IntelliPort的多端口串行控制器</div><div class="line">   net 网卡设备</div><div class="line">   sound 音频卡设备</div><div class="line">   video 视频卡设备</div><div class="line">   cdrom 专用CD-ROM设备（除ATAPI和SCSI之外）</div><div class="line">   isd0n ISDN设备</div><div class="line">   apl000 富士的AP1000设备</div><div class="line">   macintosh 苹果的Macintosh设备</div><div class="line">   sgi SGI的设备</div><div class="line">   fc4 光纤设备</div><div class="line">   acorn Acorn的设备</div><div class="line">   misc 杂项设备</div><div class="line">   pnp 即插即用的支持</div><div class="line">   usb 通用串行总线（USB）的支持</div><div class="line">   pci PCI总线的支持</div><div class="line">   sbus Sun的SPARC SBus的支持</div><div class="line">   nubus 苹果的Macintosh Nubus的支持</div><div class="line">   zorro Amiga的Zorro总线的支持</div><div class="line">   dio 惠普的HP300 DIO总线的支持</div><div class="line">   tc Sun的TurboChannel支持（尚未完成）</div><div class="line">Lib 通用内核函数</div><div class="line">Include 头文件（.h）</div><div class="line">   linux 内核核心部分 </div><div class="line">      lockd 远程文件加锁</div><div class="line">      nfsd 集成的网络文件服务器</div><div class="line">      sunrpc Sun的远程过程调用</div><div class="line">      byteorder 字节交换函数</div><div class="line">      modules 模块支持</div><div class="line">   asm-generic 平台无关低级头文件</div><div class="line">   asm-i386 IBM的PC体系结构</div><div class="line">   asm-alpha 康柏的Alpha体系结构</div><div class="line">   asm-mips SGI的MIPS体系结构</div><div class="line">   asm-m68k Motorola-IBM的基于PowerPC的体系结构</div><div class="line">   asm-ppc Motorola-IBM的PowerPC体系结构</div><div class="line">   asm-s390 IBM的System/390体系结构</div><div class="line">   asm-sparc Sun的SPARC体系结构</div><div class="line">   asm-sparc64 Sun的Ultra-SPARC体系结构</div><div class="line">   asm-arm 基于ARM处理器的体系结构</div><div class="line">   net 网络</div><div class="line">   scsi SCSI支持</div><div class="line">   video 视频卡支持</div><div class="line">   config 定义内核配置的宏所在的头文件</div><div class="line">scripts 生成内核映像的外部程序</div><div class="line">Documentation有关内核各个部分的通用解释和注释的文本文件</div></pre></td></tr></table></figure>
<p>arch：包含和硬件体系结构相关的代码，每种平台占一个相应的目录。和32位PC相关的代码存放在i386目录下，其中比较重要的包括kernel（内核核心部分）、mm（内存管理）、math-emu（浮点单元仿真）、lib（硬件相关工具函数）、boot（引导程序）、pci（PCI总线）和power（CPU相关状态）。</p>
<p>block：部分块设备驱动程序。</p>
<p>crypto：常用加密和散列算法（如AES、SHA等），还有一些压缩和CRC校验算法。</p>
<p>Documentation：关于内核各部分的通用解释和注释。</p>
<p>drivers：设备驱动程序，每个不同的驱动占用一个子目录。</p>
<p>fs：各种支持的文件系统，如ext、fat、ntfs等。</p>
<p>include：头文件。其中，和系统相关的头文件被放置在linux子目录下。</p>
<p>init：内核初始化代码（注意不是系统引导代码）。</p>
<p>ipc：进程间通信的代码。</p>
<p>kernel：内核的最核心部分，包括进程调度、定时器等，和平台相关的一部分代码放在arch/*/kernel目录下。</p>
<p>lib：库文件代码。</p>
<p>mm：内存管理代码，和平台相关的一部分代码放在arch/*/mm目录下。</p>
<p>net：网络相关代码，实现了各种常见的网络协议。</p>
<p>scripts：用于配置内核文件的脚本文件。</p>
<p>security：主要是一个SELinux的模块。</p>
<p>sound：常用音频设备的驱动程序等。</p>
<p>usr：实现了一个cpio。</p>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UBUNTU </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3D打印开源库--CuraEngine]]></title>
      <url>http://eroswade.github.io/2017/03/29/CuraEngine/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/Ultimaker/CuraEngine" target="_blank" rel="external">CuraEngine</a></p>
<p>这是一个3D打印切片和路经规划库.</p>
<p>The slicing process follows the following global steps:</p>
<ul>
<li>Load 3D model</li>
<li>Analize and fix 3D model</li>
<li>Slice 3D model into 2D layers</li>
<li>Build LayerParts from sliced layers</li>
<li>Generate Insets</li>
<li>Generate up/down skins areas</li>
<li>Generate sparse infill areas</li>
<li>Generate GCode for each layer<a id="more"></a>
我主要用到了它的二维规划子函数.<ul>
<li>infill.cpp 用来完成内部填充</li>
<li>pathOrderOptimizer.cpp 内轮廓和外轮廓的规划</li>
<li>intpoint.h 以上两个文件需要的数据结构</li>
<li>clipper.cpp 对上面的数据结构体进行操作的库.可以区分内外边框</li>
</ul>
</li>
</ul>
<p>个人认为这是一个很好的路径规划和3D切片参考库.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">generateLineInfill(PGtmp,m_PG,<span class="number">1000</span>,m_ResolutionY*<span class="number">100</span>,m_ResolutionY,<span class="number">45</span>,PGtmp);</div><div class="line"><span class="comment">// 判断内外圈</span></div><div class="line"><span class="keyword">bool</span> mback = ClipperLib::Orientation(PGtmp[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//hierarchy  next and previous, first child contour and the parent contour</div><div class="line">cv::findContours(phrone ,contours ,hierarchy, CV_RETR_CCOMP,CV_CHAIN_APPROX_SIMPLE );</div><div class="line">cv::Mat dst = cv::Mat::zeros(phrone.rows,phrone.cols,CV_8UC3);</div><div class="line">if (contours.size()==0)</div><div class="line">&#123;</div><div class="line">    continue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 遍历外框排序</div><div class="line">PathOptimizer pathOptimize(ClipperLib::IntPoint(0,0));// 增加入口点</div><div class="line">ClipperLib::Polygons plogs;</div><div class="line">vector&lt;int&gt; orderid;</div><div class="line">for( int idx = 0; idx &gt;= 0; idx = hierarchy[idx][0] )//外框遍历</div><div class="line">&#123;</div><div class="line">    if (contours[idx].size() &lt; 3)</div><div class="line">    &#123;</div><div class="line">        continue;</div><div class="line">    &#125;</div><div class="line">    ClipperLib::Polygon plog;</div><div class="line">    for (int i=0; i&lt;contours[idx].size(); i++)</div><div class="line">    &#123;</div><div class="line">        plog.push_back(ClipperLib::IntPoint(contours[idx][i].x,contours[idx][i].y));</div><div class="line">    &#125;</div><div class="line">    plogs.push_back(plog);</div><div class="line">    orderid.push_back(idx);</div><div class="line">&#125;</div><div class="line">pathOptimize.addPolygons(plogs);</div><div class="line">pathOptimize.optimize();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 3D打印 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 3D </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙协议说明]]></title>
      <url>http://eroswade.github.io/2017/03/29/BLETutorial/</url>
      <content type="html"><![CDATA[<p>重点要关注GAP, GATT。<br>主要针对什么是Characteristics<br>以下信息都可以由<a href="https://www.nordicsemi.com/eng/Products/Nordic-mobile-Apps/nRF-Connect-for-mobile-previously-called-nRF-Master-Control-Panel" target="_blank" rel="external">MASTER CONTROL PANEL</a> <a href="https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp" target="_blank" rel="external">googleplay</a>读出来</p>
<h2 id="GAP和GATT的差别"><a href="#GAP和GATT的差别" class="headerlink" title="GAP和GATT的差别"></a>GAP和GATT的差别</h2><h3 id="GAP-通用访问协议-Generic-Attribute-Profile"><a href="#GAP-通用访问协议-Generic-Attribute-Profile" class="headerlink" title="GAP: 通用访问协议(Generic Attribute Profile)."></a>GAP: 通用访问协议(Generic Attribute Profile).</h3><p><a href="https://devzone.nordicsemi.com/tutorials/5/ble-advertising-a-beginners-tutorial/" target="_blank" rel="external">官方说明</a><br>用于广播(advertising)的协议.<br>包含信息:</p>
<ul>
<li>RSSI</li>
<li>Address</li>
<li>Address Type (short or long)</li>
<li>Advertising Data:<ul>
<li>ShortenedLocalName</li>
<li>Flags (discoverable? can connent?)</li>
<li>UUID</li>
<li>ManufacturerSpecificData</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>没有公司信息数据:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">advertising_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">uint32_t</span>      err_code;</div><div class="line">    <span class="keyword">ble_advdata_t</span> advdata;  <span class="comment">// Struct containing advertising parameters</span></div><div class="line"></div><div class="line">    <span class="comment">// Build advertising data struct to pass into @ref ble_advertising_init.</span></div><div class="line">    <span class="built_in">memset</span>(&amp;advdata, <span class="number">0</span>, <span class="keyword">sizeof</span>(advdata));</div><div class="line"></div><div class="line">    advdata.name_type               = BLE_ADVDATA_FULL_NAME;</div><div class="line">    advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;</div><div class="line"></div><div class="line">    <span class="keyword">ble_adv_modes_config_t</span> options = &#123;<span class="number">0</span>&#125;;</div><div class="line">    options.ble_adv_fast_enabled  = BLE_ADV_FAST_ENABLED;</div><div class="line">    options.ble_adv_fast_interval = APP_ADV_INTERVAL;</div><div class="line">    options.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;</div><div class="line"></div><div class="line">    err_code = ble_advertising_init(&amp;advdata, <span class="literal">NULL</span>, &amp;options, on_adv_evt, <span class="literal">NULL</span>);</div><div class="line">    APP_ERROR_CHECK(err_code);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有公司信息:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">advertising_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">uint32_t</span>      err_code;</div><div class="line">    <span class="keyword">ble_advdata_t</span> advdata;  <span class="comment">// Struct containing advertising parameters</span></div><div class="line"></div><div class="line">    <span class="keyword">ble_advdata_manuf_data_t</span>        manuf_data; <span class="comment">// Variable to hold manufacturer specific data</span></div><div class="line">    <span class="keyword">uint8_t</span> data[]                      = <span class="string">"SomeData!"</span>; <span class="comment">// Our data to adverise</span></div><div class="line">    manuf_data.company_identifier       = <span class="number">0x0059</span>; <span class="comment">// Nordics company ID</span></div><div class="line">    manuf_data.data.p_data              = data;     </div><div class="line">    manuf_data.data.size                = <span class="keyword">sizeof</span>(data);</div><div class="line"></div><div class="line">    <span class="comment">// Build advertising data struct to pass into @ref ble_advertising_init.</span></div><div class="line">    <span class="built_in">memset</span>(&amp;advdata, <span class="number">0</span>, <span class="keyword">sizeof</span>(advdata));</div><div class="line"></div><div class="line">    advdata.name_type               = BLE_ADVDATA_SHORT_NAME;</div><div class="line">    advdata.short_name_len          = <span class="number">6</span>;</div><div class="line">    advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;</div><div class="line">    advdata.p_manuf_specific_data   = &amp;manuf_data;</div><div class="line"></div><div class="line">    <span class="keyword">ble_adv_modes_config_t</span> options = &#123;<span class="number">0</span>&#125;;</div><div class="line">    options.ble_adv_fast_enabled  = BLE_ADV_FAST_ENABLED;</div><div class="line">    options.ble_adv_fast_interval = APP_ADV_INTERVAL;</div><div class="line">    options.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;</div><div class="line"></div><div class="line">    err_code = ble_advertising_init(&amp;advdata, <span class="literal">NULL</span>, &amp;options, on_adv_evt, <span class="literal">NULL</span>);</div><div class="line">    APP_ERROR_CHECK(err_code);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/2017/03/29/BLETutorial/ADVpack.png" alt="结构图"></p>
<p><img src="/2017/03/29/BLETutorial/AdvPack2.png" alt="结构图2"></p>
<p>其中:广播接入地址：固定为0x8E89BED6</p>
<h3 id="GATT-通用属性协议-Generic-Attribute-Profile"><a href="#GATT-通用属性协议-Generic-Attribute-Profile" class="headerlink" title="GATT: 通用属性协议(Generic Attribute Profile)"></a>GATT: 通用属性协议(Generic Attribute Profile)</h3><p><a href="https://devzone.nordicsemi.com/tutorials/17/ble-characteristics-a-beginners-tutorial/" target="_blank" rel="external">官方说明</a><br>通讯协议, 负责连接之后数据传送.<br>通用属性配置文件(GATT)在属性协议(ATT)的基础上构建，为属性协议传输和存储数据建立了一些通用操作和框架。<br>包括: UART/HRS/HID 等.</p>
<h4 id="ATT-包含信息"><a href="#ATT-包含信息" class="headerlink" title="ATT 包含信息:"></a>ATT 包含信息:</h4><ul>
<li>Attribute Handles</li>
<li>Attribute Types (UUIDs)</li>
<li>Attribute Permissions</li>
<li>Attribute Values</li>
</ul>
<h4 id="GATT-信息"><a href="#GATT-信息" class="headerlink" title="GATT 信息:"></a>GATT 信息:</h4><ul>
<li>Service Declaration attribute</li>
<li>Characteristic Declaration</li>
<li>Characteristic Value Declaration</li>
<li>Descriptor Declaration</li>
</ul>
<h3 id="BLE-UART-S132"><a href="#BLE-UART-S132" class="headerlink" title="BLE UART S132"></a>BLE UART S132</h3><p><a href="http://blog.csdn.net/a369000753/article/details/51206309" target="_blank" rel="external">这篇文章说的很清楚</a></p>
<h4 id="调试碰到的问题"><a href="#调试碰到的问题" class="headerlink" title="调试碰到的问题"></a>调试碰到的问题</h4><h5 id="2017-04-27"><a href="#2017-04-27" class="headerlink" title="2017.04.27"></a>2017.04.27</h5><ul>
<li>SDK 8 的版本函数和10的版本函数不一样. </li>
<li>要考虑自己的板子晶振问题, 和启动有关 ble_static_init</li>
</ul>
<h5 id="2017-04-28"><a href="#2017-04-28" class="headerlink" title="2017.04.28"></a>2017.04.28</h5><ul>
<li>自己的板子UART 要注意流控 APP_UART_FLOW_CONTROL_DISABLED</li>
</ul>
<h5 id="2017-04-30"><a href="#2017-04-30" class="headerlink" title="2017.04.30"></a>2017.04.30</h5><ul>
<li>如果用STATIC, 在KEIL里,不同的C文件调用, 会生成不同的实例. 所以必须用extern 的方式.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 硬件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝牙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[matlab to Python MATLAB转PYTHON(持续更新)]]></title>
      <url>http://eroswade.github.io/2017/03/27/matlabtopy/</url>
      <content type="html"><![CDATA[<ol>
<li>dot<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.sum(A.conj()*B), axis=0)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><a id="more"></a>
<p><a href="https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html" target="_blank" rel="external">NUMPY FOR MATLAB USER</a></p>
<table>
<thead>
<tr>
<th>MATLAB</th>
<th>numpy</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>help func</td>
<td>info(func) or help(func) or func? (in Ipython)</td>
<td>get help on the function func</td>
</tr>
<tr>
<td>which func</td>
<td>see note HELP</td>
<td>find out where func is defined</td>
</tr>
<tr>
<td>type func</td>
<td>source(func) or func?? (in Ipython)</td>
<td>print source for func (if not a native function)</td>
</tr>
<tr>
<td>a &amp;&amp; b</td>
<td>a and b</td>
<td>short-circuiting logical AND operator (Python native operator); scalar arguments only</td>
</tr>
<tr>
<td>a &#124;&#124; b</td>
<td>a or b</td>
<td>short-circuiting logical OR operator (Python native operator); scalar arguments only</td>
</tr>
<tr>
<td>1<em>i, 1</em>j, 1i, 1j</td>
<td>1j</td>
<td>complex numbers</td>
</tr>
<tr>
<td>eps</td>
<td>np.spacing(1)</td>
<td>Distance between 1 and the nearest floating point number.</td>
</tr>
<tr>
<td>ode45</td>
<td>scipy.integrate.ode(f).set_integrator(‘dopri5’)</td>
<td>integrate an ODE with Runge-Kutta 4,5</td>
</tr>
<tr>
<td>ode15s</td>
<td>scipy.integrate.ode(f).set_integrator(‘vode’, method=’bdf’, order=5)</td>
<td>integrate an ODE with BDF method</td>
</tr>
<tr>
<td>ndims(a)</td>
<td>ndim(a) or a.ndim</td>
<td>get the number of dimensions of an array</td>
</tr>
<tr>
<td>numel(a)</td>
<td>size(a) or a.size</td>
<td>get the number of elements of an array</td>
</tr>
<tr>
<td>size(a)</td>
<td>shape(a) or a.shape</td>
<td>get the ??size?? of the matrix</td>
</tr>
<tr>
<td>size(a,n)</td>
<td>a.shape[n-1]</td>
<td>get the number of elements of the n-th dimension of array a. (Note that MATLAB? uses 1 based indexing while Python uses 0 based indexing, See note INDEXING)</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NRF51822操作MX25L4005]]></title>
      <url>http://eroswade.github.io/2017/03/24/NRF-MX25L/</url>
      <content type="html"><![CDATA[<h1 id="nrf51822操作MX25L4005"><a href="#nrf51822操作MX25L4005" class="headerlink" title="nrf51822操作MX25L4005"></a>nrf51822操作MX25L4005</h1><h3 id="指令集："><a href="#指令集：" class="headerlink" title="指令集："></a>指令集：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read_CMD			0x03</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Sector_Erase		0x20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Block_Erase		0xD8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Chip_Erase		0x60</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Page_Program		0x02</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read_Status		0x05</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Write_Status		0x01</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Write_Enable		0x06</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Write_Disable		0x04</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read_ID			0x9F</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read				0x03</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Fast_Read			0x0B</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Power_Down		0xB9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Release_DP		0xAB</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Enter_4K			0xA5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Exit_4K			0xB5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read_ES			0xAB</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Read_EMS			0x90</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_Flash_Parallel_Mode		0x55</span></div></pre></td></tr></table></figure>
<h3 id="内存结构："><a href="#内存结构：" class="headerlink" title="内存结构："></a>内存结构：</h3><p><img src="/2017/03/24/NRF-MX25L/mem_struct.png" alt="DATASTRUCT"></p>
<a id="more"></a>
<h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE:"></a>CODE:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div></pre></td><td class="code"><pre><div class="line">#include &quot;M25L.h&quot;</div><div class="line">#include &lt;nrf51.h&gt;</div><div class="line">#include &quot;../Broad_Pin_config.h&quot;</div><div class="line">#include &quot;spi_master_config.h&quot;</div><div class="line">#include &quot;nrf_gpio.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">#define FLASH_ENABLE nrf_gpio_pin_clear(SPI_PSELSS1)</div><div class="line">#define FLASH_DISABLE nrf_gpio_pin_set(SPI_PSELSS1)</div><div class="line">#define SPI_BUFSIZE 8</div><div class="line">uint8_t   M25MasterBuffer[SPI_BUFSIZE];</div><div class="line">uint8_t   M25SlaveBuffer[SPI_BUFSIZE];</div><div class="line">uint8_t  M25ReadLength, M25WriteLength;</div><div class="line"></div><div class="line">#define SET			0x01</div><div class="line">#define	RESET		0x00</div><div class="line"></div><div class="line">uint8_t Flash_Init(void)</div><div class="line">&#123;</div><div class="line">	uint32_t *spi_base_address = spi_master_init(SPI1, SPI_MODE0, false);</div><div class="line">	if (spi_base_address == 0) &#123;</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">u8 SPI1_WriteRead_Data(u8 dat)</div><div class="line">&#123;</div><div class="line">	uint32_t counter = 0;</div><div class="line"></div><div class="line">	NRF_SPI_Type *spi_base = (NRF_SPI_Type *)NRF_SPI1;</div><div class="line"></div><div class="line"></div><div class="line">	spi_base-&gt;TXD = (uint32_t)(dat);</div><div class="line"></div><div class="line">	while ((spi_base-&gt;EVENTS_READY == 0U) &amp;&amp; (counter &lt; TIMEOUT_COUNTER))</div><div class="line">	&#123;</div><div class="line">		counter++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (counter == TIMEOUT_COUNTER) </div><div class="line">	&#123;</div><div class="line">		FLASH_DISABLE;</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">	else &#123;   /* clear the event to be ready to receive next messages */</div><div class="line">		spi_base-&gt;EVENTS_READY = 0U;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return (uint8_t)spi_base-&gt;RXD;							</div><div class="line">&#125;</div><div class="line"></div><div class="line">FLASH_ID Flash_Read_ID(void)</div><div class="line">&#123;</div><div class="line">	FLASH_ID  Flash_id;</div><div class="line"></div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Read_ID);</div><div class="line">	Flash_id.MXIC_ID = SPI1_WriteRead_Data(DummyData);</div><div class="line">	Flash_id.MemType_ID = SPI1_WriteRead_Data(DummyData);</div><div class="line">	Flash_id.MemDensity_ID = SPI1_WriteRead_Data(DummyData);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	return 	Flash_id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void Flash_Write_Enable(void)</div><div class="line">&#123;</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Write_Enable);</div><div class="line">	FLASH_DISABLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_Write_Disable(void)</div><div class="line">&#123;</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Write_Disable);</div><div class="line">	FLASH_DISABLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">u8 Flash_Read_Status_Register(void)</div><div class="line">&#123;</div><div class="line">	u8 data;</div><div class="line"></div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Read_Status);</div><div class="line">	data = SPI1_WriteRead_Data(DummyData);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	return data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_Write_Status_Register(u8 dat)</div><div class="line">&#123;</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Write_Status);</div><div class="line">	SPI1_WriteRead_Data(dat);</div><div class="line">	FLASH_DISABLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_Sector_Erase(u16 Sector_idx)</div><div class="line">&#123;</div><div class="line">	u8 Sector_Addr_H;</div><div class="line">	u8 Sector_Addr_M;</div><div class="line">	u8 Sector_Addr_L;</div><div class="line"></div><div class="line">	Sector_Addr_H = (u8)(((Sector_idx * 0x1000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Sector_Addr_M = (u8)(((Sector_idx * 0x1000) &amp; 0x0000ff00) &gt;&gt; 8);</div><div class="line">	Sector_Addr_L = 0x00;</div><div class="line"></div><div class="line">	Flash_Write_Enable();</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Sector_Erase);</div><div class="line">	SPI1_WriteRead_Data(Sector_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Sector_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Sector_Addr_L);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	while (Flash_Read_Status_Register()&amp;C_Flash_Busy != RESET);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_Block_Erase(u16 Block_idx)</div><div class="line">&#123;</div><div class="line">	u8 Block_Addr_H;</div><div class="line">	u8 Block_Addr_M;</div><div class="line">	u8 Block_Addr_L;</div><div class="line"></div><div class="line">	Block_Addr_H = (u8)(((Block_idx * 0x10000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Block_Addr_M = 0x00;</div><div class="line">	Block_Addr_L = 0x00;</div><div class="line"></div><div class="line">	Flash_Write_Enable();</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Block_Erase);</div><div class="line">	SPI1_WriteRead_Data(Block_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Block_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Block_Addr_L);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	while (Flash_Read_Status_Register()&amp;C_Flash_Busy != RESET);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_Chip_Erase(void)</div><div class="line">&#123;</div><div class="line">	Flash_Write_Enable();</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Chip_Erase);</div><div class="line">	FLASH_DISABLE;</div><div class="line">	while (Flash_Read_Status_Register()&amp;C_Flash_Busy != RESET);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_WriteByte(uint32_t data_addr, u8 data)</div><div class="line">&#123;</div><div class="line">	u8 Data_Addr_H;</div><div class="line">	u8 Data_Addr_M;</div><div class="line">	u8 Data_Addr_L;</div><div class="line"></div><div class="line">	Data_Addr_H = (u8)(((data_addr * 0x10000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Data_Addr_M = (u8)(((data_addr * 0x10000) &amp; 0x0000ff00) &gt;&gt; 8);</div><div class="line">	Data_Addr_L = (u8)((data_addr * 0x10000) &amp; 0x000000ff);</div><div class="line"></div><div class="line">	Flash_Write_Enable();</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Page_Program);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_L);</div><div class="line">	SPI1_WriteRead_Data(data);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	while (Flash_Read_Status_Register()&amp;C_Flash_Busy != RESET);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_WriteBytes(uint32_t data_addr, u8* ptdata, u16 count)</div><div class="line">&#123;</div><div class="line">	u8 Data_Addr_H;</div><div class="line">	u8 Data_Addr_M;</div><div class="line">	u8 Data_Addr_L;</div><div class="line"></div><div class="line">	Data_Addr_H = (u8)(((data_addr * 0x10000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Data_Addr_M = (u8)(((data_addr * 0x10000) &amp; 0x0000ff00) &gt;&gt; 8);</div><div class="line">	Data_Addr_L = (u8)((data_addr * 0x10000) &amp; 0x000000ff);</div><div class="line"></div><div class="line">	Flash_Write_Enable();</div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Page_Program);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_L);</div><div class="line"></div><div class="line">	for (; count != 0; count--)</div><div class="line">	&#123;</div><div class="line">		SPI1_WriteRead_Data(*(ptdata++));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	while (Flash_Read_Status_Register()&amp;C_Flash_Busy != RESET);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Flash_ReadBytes(uint32_t data_addr, u8* ptdata, u16 count)</div><div class="line">&#123;</div><div class="line">	u8 Data_Addr_H;</div><div class="line">	u8 Data_Addr_M;</div><div class="line">	u8 Data_Addr_L;</div><div class="line"></div><div class="line">	Data_Addr_H = (u8)(((data_addr * 0x10000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Data_Addr_M = (u8)(((data_addr * 0x10000) &amp; 0x0000ff00) &gt;&gt; 8);</div><div class="line">	Data_Addr_L = (u8)((data_addr * 0x10000) &amp; 0x000000ff);</div><div class="line"></div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Fast_Read);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_L);</div><div class="line">	SPI1_WriteRead_Data(DummyData);</div><div class="line"></div><div class="line">	for (; count != 0; count--)</div><div class="line">	&#123;</div><div class="line">		*(ptdata++) = SPI1_WriteRead_Data(DummyData);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	FLASH_DISABLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">u8 Flash_ReadByte(uint32_t data_addr)</div><div class="line">&#123;</div><div class="line">	u8 data;</div><div class="line">	u8 Data_Addr_H;</div><div class="line">	u8 Data_Addr_M;</div><div class="line">	u8 Data_Addr_L;</div><div class="line"></div><div class="line">	Data_Addr_H = (u8)(((data_addr * 0x10000) &amp; 0x00ff0000) &gt;&gt; 16);</div><div class="line">	Data_Addr_M = (u8)(((data_addr * 0x10000) &amp; 0x0000ff00) &gt;&gt; 8);</div><div class="line">	Data_Addr_L = (u8)((data_addr * 0x10000) &amp; 0x000000ff);</div><div class="line"></div><div class="line">	FLASH_ENABLE;</div><div class="line">	SPI1_WriteRead_Data(SPI_Flash_Read);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_H);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_M);</div><div class="line">	SPI1_WriteRead_Data(Data_Addr_L);</div><div class="line">	data = SPI1_WriteRead_Data(DummyData);</div><div class="line">	FLASH_DISABLE;</div><div class="line"></div><div class="line">	return data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用注意事项："><a href="#使用注意事项：" class="headerlink" title="使用注意事项："></a>使用注意事项：</h3><p>首先，写数据之前必须要<strong>擦除</strong>，因为所有的flash只能从1变为0，擦除将flash全部置1，写的时候相应位置0。<br>在对flash进行写操作时，要理解一点：对flash写数据(也就是Page Program(PP)，Command 02)是基于页(256bytes)为单位的，如果数据写到页的末尾，会从当前页的首地址继续开始写剩余的数据，这样就有可能造成成数据的丢失。<br>也就是说：</p>
<ul>
<li>如果从0开始写， 数据量大于256，写完256个数据之后， 会从<strong>当前页</strong>的0位开始写后面的数据。</li>
<li>如果不是从0开始写，数量量超当前页的时候， 也会从<strong>当前页</strong>的0位开始覆盖数据。</li>
</ul>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="http://blog.csdn.net/heshanxingzhe/article/details/6170087" target="_blank" rel="external">heshanxingzhe</a><br><a href="http://wenku.baidu.com/link?url=r44oXZ4HFg-nkf4GSwskH4Vf9uFw99e6XoFM4aLr6yF4YrcxkaxmvSyKJ2cTpvsywnbWX3QKow1sPrRnLS3QYT66EHiYcPu9zFq4ZVLtzYq" target="_blank" rel="external">jayjiang86</a></p>
]]></content>
      
        <categories>
            
            <category> 硬件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝牙 </tag>
            
            <tag> NRF51822 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NRF51822 SPI]]></title>
      <url>http://eroswade.github.io/2017/03/23/NRF51822-SPI/</url>
      <content type="html"><![CDATA[<p>调试NRF51822 SPI 和LIS3DH通讯， 碰到一个很奇葩的问题，做一下记录。以免自己忘记。 测试了10多个小时。 </p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>NRF51822 和 LIS3DH通讯， 并把数据通过ble_uart协议发送到手机上。 之前已经做过一次。 代码基本现成。 但就是在读取不到数据。<br>找了很久代码的原因。依然没有找到。 后来突然想起来。工程文件好像之前清理过。 因为之前的项目用不到SPI， 把SPI相关的信息清了。<br><img src="/2017/03/23/NRF51822-SPI/SPI_NRF51.png" alt="SPI_NRF51"></p>
<a id="more"></a>
<h2 id="SPI-MASTER-0-ENABLE"><a href="#SPI-MASTER-0-ENABLE" class="headerlink" title="SPI_MASTER_0_ENABLE"></a>SPI_MASTER_0_ENABLE</h2><p>主要问题是在 components\drivers_nrf\spi_master\spi_master.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SPI_MASTER_0_ENABLE</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @brief SPI0 interrupt handler.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI0_TWI0_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ((NRF_SPI0-&gt;EVENTS_READY == <span class="number">1</span>) &amp;&amp; (NRF_SPI0-&gt;INTENSET &amp; SPI_INTENSET_READY_Msk))</div><div class="line">    &#123;</div><div class="line">        NRF_SPI0-&gt;EVENTS_READY = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">volatile</span> <span class="keyword">spi_master_instance_t</span> * p_spi_instance = spi_master_get_instance(SPI_MASTER_0);</div><div class="line"></div><div class="line">        spi_master_send_recv_irq(p_spi_instance);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//SPI_MASTER_0_ENABLE</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SPI_MASTER_1_ENABLE</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @brief SPI0 interrupt handler.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_TWI1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ((NRF_SPI1-&gt;EVENTS_READY == <span class="number">1</span>) &amp;&amp; (NRF_SPI1-&gt;INTENSET &amp; SPI_INTENSET_READY_Msk))</div><div class="line">    &#123;</div><div class="line">        NRF_SPI1-&gt;EVENTS_READY = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">volatile</span> <span class="keyword">spi_master_instance_t</span> * p_spi_instance = spi_master_get_instance(SPI_MASTER_1);</div><div class="line"></div><div class="line">        spi_master_send_recv_irq(p_spi_instance);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//SPI_MASTER_1_ENABLE</span></span></div></pre></td></tr></table></figure></p>
<h2 id="DEBUG-NRF-USER"><a href="#DEBUG-NRF-USER" class="headerlink" title="DEBUG_NRF_USER"></a>DEBUG_NRF_USER</h2><p>可能这个非必须， 只是因为我调用到了这个函数。<br>components\libraries\util\nrf_assert.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if defined(DEBUG_NRF) || defined(DEBUG_NRF_USER)</div><div class="line"></div><div class="line">void assert_nrf_callback(uint16_t line_num, const uint8_t *file_name);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 硬件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝牙 </tag>
            
            <tag> NRF51822 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Computer Investing W4]]></title>
      <url>http://eroswade.github.io/2017/03/22/Computer-Investing-W4/</url>
      <content type="html"><![CDATA[<h1 id="看Cousera的Computer-Investing-的随笔"><a href="#看Cousera的Computer-Investing-的随笔" class="headerlink" title="看Cousera的Computer Investing 的随笔"></a>看Cousera的Computer Investing 的随笔</h1><h2 id="where-does-info-come-from"><a href="#where-does-info-come-from" class="headerlink" title="where does info come from"></a>where does info come from</h2><p>price/volume: from the markets  价格/成交量:从市场来 true value<br>fundamentals: sec filings  基本面:财务报表<br>news: exogenous sources 新闻: 外部生成.</p>
<h2 id="3-versions-of-efficient-markets-hypothesis"><a href="#3-versions-of-efficient-markets-hypothesis" class="headerlink" title="3 versions of efficient markets hypothesis"></a>3 versions of efficient markets hypothesis</h2><p>3种 有效市场假设</p>
<ul>
<li>weak: 新闻不影响以后的价值, 只影响当前和以前的. 技术可分析的</li>
<li>semi-strong 消息会连续的影响价值</li>
<li>strong 1+2 还可能会对没有披露的信息产生响应.</li>
</ul>
<a id="more"></a> 
<p>认知偏差:<br>过度自信<br>过度应激<br>信息偏差</p>
<h2 id="QSTK-处理事件"><a href="#QSTK-处理事件" class="headerlink" title="QSTK 处理事件"></a>QSTK 处理事件</h2><p>1 认为和大盘背离5% 都有事件发生.<br>2 </p>
<h2 id="module-objectives"><a href="#module-objectives" class="headerlink" title="module objectives"></a>module objectives</h2><ul>
<li>understand ‘risk’</li>
<li>understand correlation and covariance 相关,和协方差</li>
<li>understand mean variance optimization 均值方差优化</li>
<li>understand the efficient frontier  有效边界</li>
</ul>
<h2 id="portfolio-optimization-投资策略优化"><a href="#portfolio-optimization-投资策略优化" class="headerlink" title="portfolio optimization  投资策略优化"></a>portfolio optimization  投资策略优化</h2><p>入: </p>
<ul>
<li>一组股票</li>
<li>目标收益</li>
</ul>
<p>找出:<br>分配方式,使最小risk.</p>
<h2 id="input-and-output-of-portfolio-optmizer"><a href="#input-and-output-of-portfolio-optmizer" class="headerlink" title="input and output of portfolio optmizer"></a>input and output of portfolio optmizer</h2><p>input:</p>
<ul>
<li>expected return for each equity</li>
<li>volatility(rist) of each equity</li>
<li>target return</li>
<li>covariance matrix</li>
</ul>
<p>output:</p>
<ul>
<li>portfolio weights that minimize risk for target return</li>
</ul>
<h2 id="The-Efficient-Frontier-边界"><a href="#The-Efficient-Frontier-边界" class="headerlink" title="The Efficient Frontier(边界)"></a>The Efficient Frontier(边界)</h2><p>看evernote</p>
<h2 id="How-Optimizers-Work"><a href="#How-Optimizers-Work" class="headerlink" title="How Optimizers Work"></a>How Optimizers Work</h2><p>qstk t8</p>
<ul>
<li>define variable: equity weights</li>
<li>define constraints: min or max weight</li>
<li>define optimization criteria: function of weights</li>
<li>optimizer algorithm: <ul>
<li>Tweak weights</li>
<li>check constraints</li>
<li>ok?</li>
<li>call function</li>
<li>repeat</li>
</ul>
</li>
</ul>
<p>里面有一个很重点的东西 cvxopt  convex optimization.<br>凸线优化 SIN函数可以找到高峰, 低谷能排除. 重点!!</p>
]]></content>
      
        <categories>
            
            <category> 金融 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序化交易 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[matlab call python]]></title>
      <url>http://eroswade.github.io/2017/03/22/matlab-call-python/</url>
      <content type="html"><![CDATA[<h1 id="MATLAB-call-python"><a href="#MATLAB-call-python" class="headerlink" title="MATLAB call python"></a>MATLAB call python</h1><p>Make sure the Python module is on the Python search path. To test if module <code>mymod</code> is on the path, type:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">py.importlib.import_module(&apos;mymod&apos;)</div></pre></td></tr></table></figure></p>
<p>If Python cannot find the module, MATLAB displays a Python error message.</p>
<p>To add mymod, in folder modpath, to the path, type:</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">P = py.sys.path;</div><div class="line"><span class="keyword">if</span> count(P,<span class="string">'modpath'</span>) == <span class="number">0</span></div><div class="line">    insert(P,int32(<span class="number">0</span>),<span class="string">'modpath'</span>);</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p><code>py.importlib.import_module(&#39;mymod&#39;)</code></p>
<h2 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h2><p><code>py.reload(mod);</code></p>
<h2 id="get-data"><a href="#get-data" class="headerlink" title="get data"></a>get data</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d=py.sys.path;</div><div class="line">d=cell(d);</div><div class="line">dat=char(d&#123;<span class="number">1</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="data-trans"><a href="#data-trans" class="headerlink" title="data trans"></a>data trans</h2><ul>
<li>时间  <code>py.datetime.date(int32(2011),int32(1),int32(1))</code></li>
<li>string   <code>py.str(matlab char)</code></li>
<li>list      <code>py.list(matlab cell)</code></li>
</ul>
<h2 id="matlab-python-std-差别"><a href="#matlab-python-std-差别" class="headerlink" title="matlab python std 差别"></a>matlab python std 差别</h2><p>MATLAB默认用无偏/N-1 PYTHON默认用总体/N</p>
]]></content>
      
        <categories>
            
            <category> 软件开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[首弹]]></title>
      <url>http://eroswade.github.io/2017/03/21/test/</url>
      <content type="html"><![CDATA[<h3 id="今天开始准备写写BLOG"><a href="#今天开始准备写写BLOG" class="headerlink" title="今天开始准备写写BLOG"></a>今天开始准备写写BLOG</h3><p>写了很多年日记，但就是不喜欢在网上写东西。文笔差是一部分，不愿意和陌生人分享也是一部分。</p>
<h3 id="为什么开始写？"><a href="#为什么开始写？" class="headerlink" title="为什么开始写？"></a>为什么开始写？</h3><p>也许只是李笑来的影响。 想写写文字。 一来给自己一个锻炼文笔的地方。 二来也给自己一点压力吧。 还有很重要的一点，结婚，生子之后，确实成长了很多。 有很多东西，挺想和人说说。</p>
<a id="more"></a> 
<h3 id="写什么？"><a href="#写什么？" class="headerlink" title="写什么？"></a>写什么？</h3><p>可能主要还是写工作吧。 然后会写一些随想。这部分大概就是我的分类了。</p>
<ul>
<li>软件开发</li>
<li>硬件开发</li>
<li>经管</li>
<li>数学/AI</li>
<li>自己的项目</li>
<li>计划总结</li>
</ul>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="http://hexo.io/" target="_blank" rel="external">hexo</a><br><a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a><br><a href="http://github.com/wzpan/hexo-theme-freemind/" target="_blank" rel="external">Freemind</a></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
